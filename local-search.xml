<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>djiango项目搭建</title>
    <link href="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <url>/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>快速搭建djiango项目</p><span id="more"></span><h2 id="安装djiango"><a href="#安装djiango" class="headerlink" title="安装djiango"></a>安装djiango</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install django<br></code></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>打开终端</p><p>进入存放项目的目录下，执行下面的命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;c:\python39\Scripts\django-admin.exe&quot;</span> startproject 项目名称<br><span class="hljs-comment"># 若 c:\python39\Scripts 已加入环境系统环境变量，可以直接输入：</span><br>django-admin startproject 项目名称<br></code></pre></td></tr></table></figure><p>项目默认文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">djiango_pro<br>├── manage<span class="hljs-selector-class">.py</span>         【项目的管理，启动项目、创建app、数据管理】【不要动】<br>└── djiango_pro<br>    ├── __init__<span class="hljs-selector-class">.py</span><br>    ├── settings<span class="hljs-selector-class">.py</span>    【项目配置】       <br>    ├── urls<span class="hljs-selector-class">.py</span>        【URL和函数的对应关系】<br>    ├── asgi<span class="hljs-selector-class">.py</span>        【接收网络请求】【不要动】<br>    └── wsgi<span class="hljs-selector-class">.py</span>        【接收网络请求】【不要动】<br></code></pre></td></tr></table></figure><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3<span class="hljs-number">.10</span> startapp app<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── djg<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── admin<span class="hljs-selector-class">.py</span>         【固定，不用动】django默认提供了admin后台管理。<br>│   ├── apps<span class="hljs-selector-class">.py</span>          【固定，不用动】app启动类<br>│   ├── migrations       【固定，不用动】数据库变更记录<br>│   │   └── __init__<span class="hljs-selector-class">.py</span><br>│   ├── models<span class="hljs-selector-class">.py</span>        【重要】，对数据库操作。<br>│   ├── tests<span class="hljs-selector-class">.py</span>         【固定，不用动】单元测试<br>│   └── views<span class="hljs-selector-class">.py</span>         【重要】，具体实现函数。<br></code></pre></td></tr></table></figure><h2 id="配置相关文件"><a href="#配置相关文件" class="headerlink" title="配置相关文件"></a>配置相关文件</h2><h3 id="注册app【settings-py】"><a href="#注册app【settings-py】" class="headerlink" title="注册app【settings.py】"></a>注册app【settings.py】</h3><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208114423964.png" class title="image-20230208114423964"><h3 id="编写URL和视图函数对应关系-【urls-py】"><a href="#编写URL和视图函数对应关系-【urls-py】" class="headerlink" title="编写URL和视图函数对应关系 【urls.py】"></a>编写URL和视图函数对应关系 【urls.py】</h3><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208140658257.png" class title="image-20230208140658257"><h3 id="编写视图函数-【views-py】"><a href="#编写视图函数-【views-py】" class="headerlink" title="编写视图函数 【views.py】"></a>编写视图函数 【views.py】</h3><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208140750004.png" class title="image-20230208140750004"><h2 id="启动django项目"><a href="#启动django项目" class="headerlink" title="启动django项目"></a>启动django项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3<span class="hljs-number">.10</span> manage.py runserver <br></code></pre></td></tr></table></figure><h2 id="url与函数的关系"><a href="#url与函数的关系" class="headerlink" title="url与函数的关系"></a>url与函数的关系</h2><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208141611327.png" class title="image-20230208141611327"><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><h3 id="templates介绍"><a href="#templates介绍" class="headerlink" title="templates介绍"></a>templates介绍</h3><p>存放前端html文件</p><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208141851602.png" class title="image-20230208141851602"><h3 id="static介绍"><a href="#static介绍" class="headerlink" title="static介绍"></a>static介绍</h3><p>存放js、img、css等静态文件</p><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208142059168.png" class title="image-20230208142059168"><h3 id="前端html引用静态文件"><a href="#前端html引用静态文件" class="headerlink" title="前端html引用静态文件"></a>前端html引用静态文件</h3><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208142405757.png" class title="image-20230208142405757"><h2 id="案例：登录"><a href="#案例：登录" class="headerlink" title="案例：登录"></a>案例：登录</h2><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208143438110.png" class title="image-20230208143438110"><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208143515216.png" class title="image-20230208143515216"><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208143717864.png" class title="image-20230208143717864"><h2 id="djiango数据库操作"><a href="#djiango数据库操作" class="headerlink" title="djiango数据库操作"></a>djiango数据库操作</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">DATABASES = &#123;<br>    &#x27;default&#x27;: &#123;<br>        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,<br>        &#x27;NAME&#x27;: &#x27;unicon&#x27;,  <span class="hljs-meta"># 数据库名字</span><br>        &#x27;USER&#x27;: &#x27;root&#x27;, <span class="hljs-meta"># 账号</span><br>        &#x27;PASSWORD&#x27;: &#x27;root123&#x27;, <span class="hljs-meta"># 密码</span><br>        &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,  <span class="hljs-meta"># 那台机器安装了MySQL</span><br>        &#x27;PORT&#x27;: <span class="hljs-number">3306</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208154551997.png" class title="image-20230208154551997"><h3 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h3><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208154912433.png" class title="image-20230208154912433"><p>设置字段默认值</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">age</span> <span class="hljs-operator">=</span> models.IntegerField(default<span class="hljs-operator">=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>设置字段允许为空</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">data = models.IntegerField(<span class="hljs-attribute">null</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">blank</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python3<span class="hljs-number">.10</span> manage.py makemigrations<br>python3<span class="hljs-number">.10</span> manage.py migrate<br></code></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p>每次修改表都在modes.py中，修改后执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python3<span class="hljs-number">.10</span> manage.py makemigrations<br>python3<span class="hljs-number">.10</span> manage.py migrate<br></code></pre></td></tr></table></figure><h3 id="修改表记录"><a href="#修改表记录" class="headerlink" title="修改表记录"></a>修改表记录</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs clean"># #### <span class="hljs-number">1.</span>新建 ####<br># Department.objects.create(title=<span class="hljs-string">&quot;销售部&quot;</span>)<br># Department.objects.create(title=<span class="hljs-string">&quot;IT部&quot;</span>)<br># Department.objects.create(title=<span class="hljs-string">&quot;运营部&quot;</span>)<br># UserInfo.objects.create(name=<span class="hljs-string">&quot;张三&quot;</span>, password=<span class="hljs-string">&quot;123&quot;</span>, age=<span class="hljs-number">19</span>)<br># UserInfo.objects.create(name=<span class="hljs-string">&quot;李四&quot;</span>, password=<span class="hljs-string">&quot;666&quot;</span>, age=<span class="hljs-number">29</span>)<br># UserInfo.objects.create(name=<span class="hljs-string">&quot;王五&quot;</span>, password=<span class="hljs-string">&quot;666&quot;</span>)<br><br># #### <span class="hljs-number">2.</span>删除 ####<br># UserInfo.objects.filter(id=<span class="hljs-number">3</span>).delete()<br># Department.objects.all().delete()<br><br># #### <span class="hljs-number">3.</span>获取数据 ####<br># <span class="hljs-number">3.1</span> 获取符合条件的所有数据<br># data_list = [对象,对象,对象]  QuerySet类型<br># data_list = UserInfo.objects.all()<br># for obj <span class="hljs-keyword">in</span> data_list:<br>#     print(obj.id, obj.name, obj.password, obj.age)<br><br># data_list = [对象,]<br># data_list = UserInfo.objects.filter(id=<span class="hljs-number">1</span>)<br># print(data_list)<br># <span class="hljs-number">3.1</span> 获取第一条数据【对象】<br># row_obj = UserInfo.objects.filter(id=<span class="hljs-number">1</span>).first()<br># print(row_obj.id, row_obj.name, row_obj.password, row_obj.age)<br><br><br># #### <span class="hljs-number">4.</span>更新数据 ####<br># UserInfo.objects.all().update(password=<span class="hljs-number">999</span>)<br># UserInfo.objects.filter(id=<span class="hljs-number">2</span>).update(age=<span class="hljs-number">999</span>)<br># UserInfo.objects.filter(name=<span class="hljs-string">&quot;张三&quot;</span>).update(age=<span class="hljs-number">999</span>)<br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/02/08/djiango%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20230208155525539.png" class title="image-20230208155525539">]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客部署github并添加域名</title>
    <link href="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/"/>
    <url>/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>将个人博客部署到github并修改访问域名，安装ssl证书使博客可以用https访问。总结部署过程中的一些问题</p><span id="more"></span><h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登录github，新建一个仓库，仓库名最好用xxx.github.io(xxx表示你的博客根目录名)。注意：新建一个公有仓库并勾选添加readme文件</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207163649123.png" class title="image-20230207163649123"><h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&#x27;你的邮箱账号&#x27;</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519.pub <span class="hljs-comment">#复制密钥</span><br></code></pre></td></tr></table></figure><p>到github中配置，settings-&gt;SSH and GPG keys-&gt;new ssh key，点击add ssh key</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207164720474.png" class title="image-20230207164720474"><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207164816039.png" class title="image-20230207164816039"><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207164950249.png" class title="image-20230207164950249"><h3 id="config-yaml配置"><a href="#config-yaml配置" class="headerlink" title="_config.yaml配置"></a>_config.yaml配置</h3><p>修改deploy下的repo为github仓库的地址，branch改为main。修改url为github上的访问地址，root为仓库名称</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207171722737.png" class title="image-20230207171722737"><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207171932403.png" class title="image-20230207171932403"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在博客根目录输入命令</span><br>hexo clean <span class="hljs-comment">#清除缓存</span><br>hexo g <span class="hljs-comment">#生成静态文件</span><br>hexo d <span class="hljs-comment">#发布到github</span><br><span class="hljs-comment">#注意第一次会需要输入账号和密码，github的密码不是登录的密码</span><br></code></pre></td></tr></table></figure><h3 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h3><p>github密码，settings-&gt;developer settings-&gt;personal access tokens-&gt;tokens-&gt;generate new token(classic)记得复制，刷新页面后会找不到</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207172500552.png" class title="image-20230207172500552"><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207172610882.png" class title="image-20230207172610882"><p>接下来就可以用pages中的地址访问你的博客了</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207173419993.png" class title="image-20230207173419993"><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><p>阿里云购买域名-&gt;进入工作台-&gt;域名解析-&gt;解析设置</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207174134412.png" class title="image-20230207174134412"><p>添加记录：类型为CNAME，记录值为你github上的访问地址。类型为A，记录值为域名IP，用ipconfig获取</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207174157103.png" class title="image-20230207174157103"><p>在博客根目录-&gt;source下新建一个CNAME文件没有后缀，文件名大些，内容为你购买的域名</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207174605399.png" class title="image-20230207174605399"><h2 id="配置ssl证书"><a href="#配置ssl证书" class="headerlink" title="配置ssl证书"></a>配置ssl证书</h2><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207180834242.png" class title="image-20230207180834242"><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207180913594.png" class title="image-20230207180913594"><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207181100256.png" class title="image-20230207181100256"><p>回到github-pages中勾选，Enforce HEEPS</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207181435574.png" class title="image-20230207181435574"><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="部署到github后css样式失效问题"><a href="#部署到github后css样式失效问题" class="headerlink" title="部署到github后css样式失效问题"></a>部署到github后css样式失效问题</h3><p>检查_config.yml文件中的配置，url和root地址样式失效基本都是这个问题</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207181829037.png" class title="image-20230207181829037"><h3 id="hexo-d提交报错"><a href="#hexo-d提交报错" class="headerlink" title="hexo d提交报错"></a>hexo d提交报错</h3><p>修改_config.yml文件下的repo地址为ssh的地址</p><img src="/qtt2020.github.io/2023/02/07/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2github%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D/image-20230207182053515.png" class title="image-20230207182053515"><p>重新生成ssh密钥，并更新github上配置的密钥</p>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ui自动化</title>
    <link href="/qtt2020.github.io/2023/02/02/ui%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <url>/qtt2020.github.io/2023/02/02/ui%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>本文讲解ui自动化，基于python+selenium+unittest框架搭建，涉及元素定位用法和一些问题解决</p><span id="more"></span><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><p>原理：利用selenium中的webdriver对python代码进行解析，解析成浏览器可以懂的指令，通过webdriver对浏览器下大指令</p><h3 id="安装、卸载、查询selenium"><a href="#安装、卸载、查询selenium" class="headerlink" title="安装、卸载、查询selenium"></a>安装、卸载、查询selenium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install selenium <span class="hljs-comment">#安装</span><br>pip show selenium <span class="hljs-comment">#查询</span><br>pip uninstall selenium <span class="hljs-comment">#卸载</span><br></code></pre></td></tr></table></figure><h3 id="元素定位方法"><a href="#元素定位方法" class="headerlink" title="元素定位方法"></a>元素定位方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># id</span><br>driver.find_element_by_id(<span class="hljs-string">&#x27;#id&#x27;</span>) <span class="hljs-comment"># id 元素的id属性值 （driver.find_element(By.ID, &#x27;#id&#x27;))也可以</span><br><span class="hljs-comment"># name</span><br>driver.find_element_by_name(<span class="hljs-string">&#x27;#name&#x27;</span>) <span class="hljs-comment"># name 元素的name属性值 （driver.find_element(By.NAME, &#x27;#name&#x27;))也可以</span><br><span class="hljs-comment"># class_name</span><br>driver.find_element_by_class_name(<span class="hljs-string">&#x27;#class_name&#x27;</span>) <span class="hljs-comment"># class_name class属性的值 （driver.find_element(By.CLASS_NAME, &#x27;#class_name&#x27;))也可以，用这个方法元素必须有class属性，若class属性值有多个则用空格隔开</span><br><span class="hljs-comment"># tag_name</span><br>driver.find_element_by_tag_name(<span class="hljs-string">&#x27;#tag_name&#x27;</span>) <span class="hljs-comment"># tag_name 元素标签名 （driver.find_element(By.TAG_NAME, &#x27;#tag_name&#x27;))也可以，多个标签名一致，则取第一个</span><br><span class="hljs-comment"># link_text</span><br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;#link_text&#x27;</span>) <span class="hljs-comment"># link_text 超链接文本全部内容 （driver.find_element(By.LINK_TETXT, &#x27;#link_text&#x27;))也可以</span><br><span class="hljs-comment"># partial_link_text</span><br>driver.find_element_by_partial_link_text(<span class="hljs-string">&#x27;#partial_link_text&#x27;</span>) <span class="hljs-comment"># partial_link_text 超链接文本的部分内容 （driver.find_element(By.PARTIAL_LINLK_TEXT, &#x27;#partial_link_text&#x27;))也可以</span><br><span class="hljs-comment"># xpath</span><br>driver.find_element_by_xpath(<span class="hljs-string">&#x27;#xpath&#x27;</span>) <span class="hljs-comment"># xpath 元素的绝对路径或相对路径 （driver.find_element(By.XPATH, &#x27;#xpath&#x27;))也可以</span><br><span class="hljs-comment">#绝对路径：/html/body/div/p[2], 以/html开头可以使用下标，下标从1开始</span><br><span class="hljs-comment">#相对路径：可以从任意层级匹配，以//标签名或//*开头，//div[@class=&quot;pages-manager_data_review-index-module_2yJAl&quot;]/div[1]/div/i或//*[@class=&quot;pages-manager_data_review-index-module_2yJAl&quot;]/div[1]/div/i</span><br><span class="hljs-comment"># xpath扩展</span><br>//*[text()=<span class="hljs-string">&quot;xxxx&quot;</span>] <span class="hljs-comment"># 定位文本内容为xxx的元素</span><br>//*[contains(@<span class="hljs-keyword">class</span>, <span class="hljs-string">&quot;xxx&quot;</span>)] <span class="hljs-comment"># 定位class属性中包含xxx的元素</span><br><span class="hljs-comment"># css</span><br>driver.find_element_by_css_selector(<span class="hljs-string">&#x27;#css&#x27;</span>) <span class="hljs-comment"># css 选择器 （driver.find_element(By.CSS_SELECTOR, &#x27;#css&#x27;))也可以</span><br><span class="hljs-comment">#id选择器 格式：#id id表示id属性的值</span><br><span class="hljs-comment">#class选择器 格式：.class class表示class属性的值</span><br><span class="hljs-comment">#标签选择器 格式：tag_name tag_name表示标签名</span><br><span class="hljs-comment">#属性选择器 格式：[id = &quot;xxx&quot;]</span><br><span class="hljs-comment">#xpath获取同级兄弟，父亲，孩子的元素</span><br>child: <span class="hljs-comment">#获取当前节点的所有子节点（不含孙子）</span><br>parent: <span class="hljs-comment">#获取当前节点的所有父节点（不含祖父）</span><br>preceding-sibling: <span class="hljs-comment">#获取当前节点之前的所有同级节点</span><br>following-sibling: <span class="hljs-comment">#获取当前节点之后的所有同级节点</span><br><span class="hljs-comment">#例子：</span><br>//div[@<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;pages-manager_data_review-index-module_2yJAl&quot;</span>]/div[<span class="hljs-number">1</span>]/div/following-sibling::div<br><span class="hljs-comment">#表示获取当前节点后的第一个div标签元素</span><br></code></pre></td></tr></table></figure><p><strong>注意：接收匹配多个元素值用driver.find_elements(By.ID, “xxx”)， 返回值是一个列表</strong></p><h3 id="元素常用操作方法"><a href="#元素常用操作方法" class="headerlink" title="元素常用操作方法"></a>元素常用操作方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">send_keys(<span class="hljs-string">&#x27;xxx&#x27;</span>) <span class="hljs-comment">#针对元素进行输入，例如：登录输入框</span><br>click() <span class="hljs-comment">#对元素进行点击操作，例如：登录按钮</span><br>clear() <span class="hljs-comment">#清除元素中的文本信息</span><br></code></pre></td></tr></table></figure><h3 id="针对浏览器操作常用方法"><a href="#针对浏览器操作常用方法" class="headerlink" title="针对浏览器操作常用方法"></a>针对浏览器操作常用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">maximize_widow() <span class="hljs-comment">#最大化浏览器</span><br>back() <span class="hljs-comment">#回退</span><br>forward() <span class="hljs-comment">#前进</span><br>refresh() <span class="hljs-comment">#刷新</span><br>close() <span class="hljs-comment">#关闭当前页</span><br>quit() <span class="hljs-comment">#关闭浏览器对象</span><br>title() <span class="hljs-comment">#获取当前浏览器窗口标题</span><br></code></pre></td></tr></table></figure><h3 id="获取元素信息常用操作"><a href="#获取元素信息常用操作" class="headerlink" title="获取元素信息常用操作"></a>获取元素信息常用操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#element为定位到的元素对象</span><br>element.text <span class="hljs-comment">#获取元素的文本</span><br>element.get_attribute(<span class="hljs-string">&#x27;xxx&#x27;</span>) <span class="hljs-comment">#获取元素xxx属性的值，xxx为元素的属性名，如：id</span><br>element.is_displayed() <span class="hljs-comment">#判断元素是否可见</span><br>element.is_enabled() <span class="hljs-comment">#判断元素是否可用</span><br>element.is_selected() <span class="hljs-comment">#判断复选框或单选框是否被选中</span><br></code></pre></td></tr></table></figure><h2 id="unittest四件套"><a href="#unittest四件套" class="headerlink" title="unittest四件套"></a>unittest四件套</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">testcase：</span> <span class="hljs-comment"># 一个testcase 就是一个测试用例。setup（测试环境的准备）、run（测试执行）、teardown（测试环境的还原）。</span><br><span class="hljs-string">testsuite（集合或套件）：</span> <span class="hljs-comment"># 多个测试用例的集合就是suite，一个 suite可以包含多个测试用例，也可以嵌套suite。</span><br><span class="hljs-string">testLoader：</span> <span class="hljs-comment"># 用来加载testcase到testsuite中的。</span><br><span class="hljs-string">texttestrunner：</span> <span class="hljs-comment"># 用例执行测试用例（run方法），测试结果会保存在TextTestresult中。</span><br><span class="hljs-string">fixture：</span> <span class="hljs-comment"># 一个测试用例环境的搭建和销毁。</span><br></code></pre></td></tr></table></figure><h2 id="常见的键盘操作"><a href="#常见的键盘操作" class="headerlink" title="常见的键盘操作"></a>常见的键盘操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">send_keys(keys.BACK_SPACE) <span class="hljs-comment">#删除键</span><br>send_keys(keys.SPACE) <span class="hljs-comment">#空格键</span><br>send_keys(keys.TAB) <span class="hljs-comment">#制表键</span><br>send_keys(keys.ESVCAPE) <span class="hljs-comment">#回退健</span><br>send_keys(keys.ENTER) <span class="hljs-comment">#回车键</span><br>send_keys(keys.CONTROL, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#全选</span><br>send_keys(keys.CONTROL, <span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment">#复制</span><br>send_keys(keys.CONTROL, <span class="hljs-string">&#x27;v&#x27;</span>) <span class="hljs-comment">#粘贴</span><br></code></pre></td></tr></table></figure><h2 id="常见的鼠标操作"><a href="#常见的鼠标操作" class="headerlink" title="常见的鼠标操作"></a>常见的鼠标操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#实例化对象</span><br>action = ActionChains(driver)<br>action.click(ele) <span class="hljs-comment">#点击</span><br>action.context_click(ele) <span class="hljs-comment">#右击，ele表示定位到的元素对象</span><br>action.double_click(ele) <span class="hljs-comment">#双击，ele表示定位到的元素对象</span><br>action.move_to_element(ele) <span class="hljs-comment">#悬停</span><br>action.drag_and_drop(source, target) <span class="hljs-comment">#元素拖动，source源元素、target目标元素</span><br>action.drag_and_drop_by_offset(source, x, y) <span class="hljs-comment">#单个元素拖动，source源元素</span><br>action.perform() <span class="hljs-comment">#触发执行以上操作</span><br></code></pre></td></tr></table></figure><h2 id="select类"><a href="#select类" class="headerlink" title="select类"></a>select类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#实例化对象</span><br>select = Select(element) <span class="hljs-comment"># element定位到的select元素对象</span><br>select.select_by_index(index) <span class="hljs-comment"># index：option索引下标</span><br>select.select_by_value(value) <span class="hljs-comment"># value：option属性value的值</span><br>select.select_by_text(text) <span class="hljs-comment"># text：option显示文本</span><br></code></pre></td></tr></table></figure><h2 id="alert弹窗"><a href="#alert弹窗" class="headerlink" title="alert弹窗"></a>alert弹窗</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">alert = driver.switch_to.alert <span class="hljs-comment"># 获取alert弹窗对象</span><br>alert.text <span class="hljs-comment"># 获取弹窗中的文字信息</span><br>alert.accept() <span class="hljs-comment"># 接受对话框选项</span><br>alert.dismiss() <span class="hljs-comment"># 取消对话框选项</span><br></code></pre></td></tr></table></figure><h2 id="常用的js操作"><a href="#常用的js操作" class="headerlink" title="常用的js操作"></a>常用的js操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 滚动条操作</span><br>js = <span class="hljs-string">&quot;window.srcollTo(0, 100)&quot;</span> <span class="hljs-comment"># 0：横向滚动距离，100：纵向滚动距离</span><br>driver.execute_script(js)<br><span class="hljs-comment"># 元素点击操作</span><br>driver.execute_script(<span class="hljs-string">&quot;arguments[0].click();&quot;</span>, ele) <span class="hljs-comment"># 需要点击的元素对象</span><br></code></pre></td></tr></table></figure><h2 id="frame切换"><a href="#frame切换" class="headerlink" title="frame切换"></a>frame切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">driver.switch_to.frame(定位信息) <span class="hljs-comment"># 定位信息可以是frame的id、name或定位到的frame元素</span><br>driver.switch_to.default_content() <span class="hljs-comment"># 恢复到默认页面，也就是最开始的页面</span><br><span class="hljs-comment"># 注意：frame可能有多个层级，不管进入多少层级，只需要执行default_conent就会直接到最开始的页面</span><br></code></pre></td></tr></table></figure><h2 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">driver.current_window_handle <span class="hljs-comment"># 获取当前窗口句柄</span><br>driver.window_handles <span class="hljs-comment"># 获取所有窗口句柄</span><br>driver.switch_to.window(handle) <span class="hljs-comment"># 切换到指定窗口，handle：指定窗口的句柄</span><br></code></pre></td></tr></table></figure><h2 id="元素等待、强制等待"><a href="#元素等待、强制等待" class="headerlink" title="元素等待、强制等待"></a>元素等待、强制等待</h2><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">driver.implicity_wait(time) <span class="hljs-comment"># time：最长等待时间。所有元素等待，如果没有查到指定元素会每隔0.5秒再次查询，知道操作设置的最长等待时间</span><br></code></pre></td></tr></table></figure><h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-comment"># controls: 元素定位</span><br><span class="hljs-comment"># param wait_times: 等待时间</span><br><span class="hljs-comment"># param poll_frequencey: 时间间隔查询一次</span><br>result = WebDriverWait(self.driver, timeout=wait_times, poll_frequency=poll_frequencey).until(<br>            EC.visibility_of_all_elements_located(controls))<br><span class="hljs-comment"># 只会作用在定位的元素上</span><br></code></pre></td></tr></table></figure><h3 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">time.sleep(time) <span class="hljs-comment"># time：等待时间</span><br></code></pre></td></tr></table></figure><h2 id="click无效排查"><a href="#click无效排查" class="headerlink" title="click无效排查"></a>click无效排查</h2><p>定位元素操作时总会遇到，明明在页面上可以查询到这个元素并且f12查询定位到元素也只有一个但是操作click时好像无效</p><p>排查这个问题步骤：</p><p>1、查看元素是否有点击属性（查看页面是否点击，或者console是否报错，若没有再看下一步）</p><p>定位到元素-&gt;操作元素点击</p><img src="/qtt2020.github.io/2023/02/02/ui%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230203112020454.png" class title="image-20230203112020454"><img src="/qtt2020.github.io/2023/02/02/ui%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230203112037076.png" class title="image-20230203112037076"><p>2、强制等待一下，有可能是上一步操作没有加载完，页面被遮挡（若加时间没用，再看下一步）</p><p>3、手动走一遍自动化这个用例的操作，在去f12查询一下这个元素定位，可能是因为之前打开的弹窗页面或者其他页面中有其他元素也匹配当前的定位方法，使用这个方法定位到的元素是上一个页面的，这时候就需要使用其他的定位方式或者用elements定位后用下标</p>]]></content>
    
    
    <categories>
      
      <category>ui自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>selenium</tag>
      
      <tag>unittest</tag>
      
      <tag>元素定位</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能测试分析</title>
    <link href="/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/"/>
    <url>/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>通过命令监控磁盘io、网络带宽、cpu、吞吐量、响应时间等，分析性能瓶颈可能存在的地方</p><span id="more"></span><h2 id="磁盘io监控结果分析（iostats-x-1）"><a href="#磁盘io监控结果分析（iostats-x-1）" class="headerlink" title="磁盘io监控结果分析（iostats -x 1）"></a>磁盘io监控结果分析（iostats -x 1）</h2><img src="/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/image-20230202154541916.png" class title="image-20230202154541916"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">%user：</span> <span class="hljs-comment"># CPU处在用户模式下的时间百分比。</span><br><span class="hljs-string">%nice：</span> <span class="hljs-comment"># CPU处在带NICE值的用户模式下的时间百分比。</span><br><span class="hljs-string">%system：</span> <span class="hljs-comment"># CPU处在系统模式下的时间百分比。</span><br><span class="hljs-string">%iowait：</span> <span class="hljs-comment"># CPU等待输入输出完成时间的百分比。</span><br><span class="hljs-string">%steal：</span> <span class="hljs-comment"># 管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</span><br><span class="hljs-string">%idle：</span> <span class="hljs-comment"># CPU空闲时间百分比。</span><br><span class="hljs-string">rrqm/s:</span>   <span class="hljs-comment"># 每秒进行 merge 的读操作数目。即 delta(rmerge)/s</span><br><span class="hljs-string">wrqm/s:</span>  <span class="hljs-comment"># 每秒进行 merge 的写操作数目。即 delta(wmerge)/s</span><br><span class="hljs-attr">r/s:</span> <span class="hljs-comment"># 每秒完成的读 I/O 设备次数。即 delta(rio)/s</span><br><span class="hljs-attr">w/s:</span> <span class="hljs-comment"># 每秒完成的写 I/O 设备次数。即 delta(wio)/s</span><br><span class="hljs-attr">rsec/s:</span> <span class="hljs-comment"># 每秒读扇区数。即 delta(rsect)/s</span><br><span class="hljs-attr">wsec/s:</span> <span class="hljs-comment"># 每秒写扇区数。即 delta(wsect)/s</span><br><span class="hljs-attr">rkB/s:</span> <span class="hljs-comment"># 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)</span><br><span class="hljs-attr">wkB/s:</span> <span class="hljs-comment"># 每秒写K字节数。是 wsect/s 的一半。(需要计算)</span><br><span class="hljs-attr">avgrq-sz:</span> <span class="hljs-comment"># 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)</span><br><span class="hljs-string">avgqu-sz:</span> <span class="hljs-comment"># 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。</span><br><span class="hljs-string">await:</span> <span class="hljs-comment"># 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)</span><br><span class="hljs-attr">svctm:</span> <span class="hljs-comment"># 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)</span><br><span class="hljs-string">%util:</span> <span class="hljs-comment"># 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)</span><br></code></pre></td></tr></table></figure><p>1）%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。</p><p>2）%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。</p><p>3）如果%util接近100%，说明生产的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘可能已经存在瓶颈</p><p>4）%idle小于70%IO压力较大，一般读取速度有较多的wait。同时结合vmstat b参数（等待资源的进程数）和wa参数（IO等待所占用的cpu时间的百分比，高过30%时IO压力过高）</p><p>5）await与svctm参考，差值过高IO存在问题，await远大于svctm。说明I&#x2F;O队列过长，io响应太慢，需要进行优化，avgqu-sz比较大，也表示有部分io在等待。</p><p>6）svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了)，svctm 的大小一般和磁盘性能有关，CPU&#x2F;内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。await 的大小一般取决于服务时间(svctm) 以及 I&#x2F;O 队列的长度和 I&#x2F;O 请求的发出模式。如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；如果 await 远大于 svctm，说明 I&#x2F;O 队列太长，应用得到的响应时间变慢，如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator 算法，优化应用，或者升级 CPU。队列长度(avgqu-sz)也可作为衡量系统 I&#x2F;O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I&#x2F;O 洪水。</p><p>列子：</p><img src="/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/image-20230202155252330.png" class title="image-20230202155252330"><p>上面的 iostat 输出表明秒有 28.57 次设备 I&#x2F;O 操作: 总IO(io)&#x2F;s &#x3D; r&#x2F;s(读) +w&#x2F;s(写) &#x3D; 1.02+27.55 &#x3D; 28.57 (次&#x2F;秒) 其中写操作占了主体 (w:r &#x3D; 27:1)。</p><p>平均每次设备 I&#x2F;O 操作只需要 5ms 就可以完成，但每个 I&#x2F;O 请求却需要等上 78ms，为什么? 因为发出的 I&#x2F;O 请求太多 (每秒钟约 29 个)，假设这些请求是同时发出的，那么平均等待时间可以这样计算:</p><p>平均等待时间 &#x3D; 单个 I&#x2F;O 服务时间 * ( 1 + 2 + … + 请求总数-1) &#x2F; 请求总数</p><p>应用到上面的例子: 平均等待时间 &#x3D; 5ms * (1+2+…+28)&#x2F;29 &#x3D; 70ms，和 iostat 给出的78ms 的平均等待时间很接近。这反过来表明 I&#x2F;O 是同时发起的。</p><p>每秒发出的 I&#x2F;O 请求很多 (约 29 个)，平均队列却不长 (只有 2 个 左右)，这表明这 29 个请求的到来并不均匀，大部分时间 I&#x2F;O 是空闲的。</p><p>一秒中有 14.29% 的时间 I&#x2F;O 队列中是有请求的，也就是说，85.71% 的时间里 I&#x2F;O 系统无事可做，所有 29 个 I&#x2F;O 请求都在142毫秒之内处理掉了。</p><p>delta(ruse+wuse)&#x2F;delta(io) &#x3D; await &#x3D; 78.21 &#x3D;&gt; delta(ruse+wuse)&#x2F;s &#x3D;78.21 * delta(io)&#x2F;s &#x3D; 78.21*28.57 &#x3D; 2232.8，表明每秒内的I&#x2F;O请求总共需要等待2232.8ms。所以平均队列长度应为 2232.8ms&#x2F;1000ms &#x3D; 2.23，而 iostat 给出的平均队列长度 (avgqu-sz) 却为 22.35，为什么?! 因为 iostat 中有 bug，avgqu-sz 值应为 2.23，而不是 22.35。</p><h2 id="分析查看网络带宽占比情况"><a href="#分析查看网络带宽占比情况" class="headerlink" title="分析查看网络带宽占比情况"></a>分析查看网络带宽占比情况</h2><ul><li>ifconfig（查看所有网口）</li><li>安装ethtool工具，ethtool em1，查看网络带宽（1000MB&#x2F;S）</li><li>查看nmon分析文件中NET sheet页中total-read和total-write的绝对值之和，如下图：total-read和total-write的绝对值之和约为60+320&#x3D;380KB&#x2F;s，网络带宽是1000Mb&#x2F;s,所以需要转换：380KB&#x2F;s *8&#x3D;3040Kb&#x2F;s &#x2F; 1024 &#x3D;2.97Mb&#x2F;s，与网卡带宽1000Mb&#x2F;s比较即可，占比只达到0.3%</li></ul><img src="/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/image-20230202155918206.png" class title="image-20230202155918206"><h2 id="cpu高load（进程队列的长度）、高内存、高-io"><a href="#cpu高load（进程队列的长度）、高内存、高-io" class="headerlink" title="cpu高load（进程队列的长度）、高内存、高 io"></a>cpu高load（进程队列的长度）、高内存、高 io</h2><img src="/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/image-20230202160236419.png" class title="image-20230202160236419"><p>根据top命令，发现PID为28555的Java进程占用CPU高达200%，出现故障。通过ps aux | grep PID命令，可以进一步确定是什么进程出现了问题</p><h2 id="用户数、吞吐量、响应时间关系"><a href="#用户数、吞吐量、响应时间关系" class="headerlink" title="用户数、吞吐量、响应时间关系"></a>用户数、吞吐量、响应时间关系</h2><img src="/qtt2020.github.io/2023/02/02/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/image-20230202160418339.png" class title="image-20230202160418339"><p>在这个图中，定义了三条曲线、三个区域、两个点以及三个状态描述。</p><ul><li><p>三条曲线:吞吐量的曲线(紫色)、使用率&#x2F;用户数曲线(绿色)、响应时间曲线(深蓝色)。</p></li><li><p>三个区域:轻负载区(Light Load)、重负载区(Heavy Load)、塌陷区(Buckle Zone)。</p></li><li><p>两个点:最优并发用户数(The Optimum Number of Concurrent Users)、最大并发用户数(The Maximum Number of ConcurrentUsers)。</p></li><li><p>三个状态描述:资源饱和(Resource Saturated)、吞吐下降(Throughput Falling)、用户受影响(End Users Effected)。</p></li></ul><p>响应时间、吞吐量异常需要进一步定位查看磁盘io、内存、宽带、cpu等</p><h2 id="性能指标含义"><a href="#性能指标含义" class="headerlink" title="性能指标含义"></a>性能指标含义</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">pv：</span> <span class="hljs-comment"># 代表一个页面请求</span><br><span class="hljs-string">hit：</span> <span class="hljs-comment"># 点击操作</span><br><span class="hljs-string">tps：</span> <span class="hljs-comment"># 一次接口请求</span><br><span class="hljs-string">Qps：</span> <span class="hljs-comment"># 请求中访问数据库次数 一个pv有n个hit，一个hit有n个tps，一个tps有n个qps</span><br></code></pre></td></tr></table></figure><h2 id="性能测试分类"><a href="#性能测试分类" class="headerlink" title="性能测试分类"></a>性能测试分类</h2><ul><li>接口性能测试：针对当个接口进行测试</li><li>场景（业务）性能测试：从实际出发分析用户的操作，在脚本操作上还原录制脚本可以将静态资源请求也录制出来更高程度还原真实场景一般都是做动态接口关键场景性能测试（瓶颈评估）</li></ul>]]></content>
    
    
    <categories>
      
      <category>性能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo页脚添加访问人数和访问量</title>
    <link href="/qtt2020.github.io/2023/02/02/hexo%E9%A1%B5%E8%84%9A%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E5%92%8C%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    <url>/qtt2020.github.io/2023/02/02/hexo%E9%A1%B5%E8%84%9A%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E5%92%8C%E8%AE%BF%E9%97%AE%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>本文介绍两种方式，leancloud和不蒜子两种，在文章页脚添加总访问人数和总访问量（基于fluid主题）</p><span id="more"></span><h2 id="不蒜子方式添加"><a href="#不蒜子方式添加" class="headerlink" title="不蒜子方式添加"></a>不蒜子方式添加</h2><p>修改_config.fluid.yml文件参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&#x27;</span> <span class="hljs-comment">#将该代码复制粘贴到_config.fluid.yml文件下</span><br><span class="hljs-attr">web_analytics:</span> <span class="hljs-comment">#将enable改为true，表示打开页面访问统计</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#页脚，content中添加以下代码</span><br><span class="hljs-string">&lt;div&gt;</span><br>    <span class="hljs-string">&lt;span</span> <span class="hljs-string">id=&quot;busuanzi_container_page_pv&quot;&gt;</span><br>    <span class="hljs-string">总访问量：&lt;span</span> <span class="hljs-string">id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</span> <span class="hljs-string">&amp;</span> <br>    <span class="hljs-string">&lt;/span&gt;</span><br>    <span class="hljs-string">&lt;span</span> <span class="hljs-string">id=&quot;busuanzi_container_page_uv&quot;&gt;</span><br>    <span class="hljs-string">总访客数：&lt;span</span> <span class="hljs-string">id=&quot;busuanzi_value_page_uv&quot;&gt;&lt;/span&gt;人</span><br>    <span class="hljs-string">&lt;/span&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-comment">#注意：不蒜子在localhost域名下显示的不是真正的数据，无需在意</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/02/02/hexo%E9%A1%B5%E8%84%9A%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E5%92%8C%E8%AE%BF%E9%97%AE%E9%87%8F/image-20230202101258356.png" class title="image-20230202101258356"><img src="/qtt2020.github.io/2023/02/02/hexo%E9%A1%B5%E8%84%9A%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E4%BA%BA%E6%95%B0%E5%92%8C%E8%AE%BF%E9%97%AE%E9%87%8F/image-20230202102610187.png" class title="image-20230202102610187"><h2 id="LeanCloud方式添加"><a href="#LeanCloud方式添加" class="headerlink" title="LeanCloud方式添加"></a>LeanCloud方式添加</h2><h3 id="使用leancloud需要申请账号（国内需要实名认证）"><a href="#使用leancloud需要申请账号（国内需要实名认证）" class="headerlink" title="使用leancloud需要申请账号（国内需要实名认证）"></a>使用leancloud需要申请账号（国内需要实名认证）</h3><p><strong>步骤：注册账号-实名认证-Email下发送验证请求（邮箱验证）-创建应用（开发版）-进入应用设置-&gt;应用凭证下，找到AppID和AppKey记录下来</strong></p><h3 id="修改配置（-config-fluid-yml）"><a href="#修改配置（-config-fluid-yml）" class="headerlink" title="修改配置（_config.fluid.yml）"></a>修改配置（_config.fluid.yml）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 添加阅读量统计，这里的id和key使用的是leancloud第三方服务，可以在该网站注册账号</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 改为true</span><br><span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span><br>    <span class="hljs-attr">app_key:</span><br><span class="hljs-attr">views:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 改为true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span> <span class="hljs-comment"># 设置统计来源</span><br><span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 次&quot;</span><br><span class="hljs-comment">#注意：LeanCloud在localhost域名下不会增加数据</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
      <tag>访客数</tag>
      
      <tag>访问量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+fluid基础配置</title>
    <link href="/qtt2020.github.io/2023/02/01/hexo+fluid%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/qtt2020.github.io/2023/02/01/hexo+fluid%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>hexo+fluid个人博客主题、文章配置、解决图片显示问题、添加总访问量和访客数、更改背景图和顶部菜单背景颜色等</p><span id="more"></span><h2 id="hexo图片插入无法显示问题"><a href="#hexo图片插入无法显示问题" class="headerlink" title="hexo图片插入无法显示问题"></a>hexo图片插入无法显示问题</h2><p>进入博客根目录，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-assert-image --save <span class="hljs-comment">#下载插件</span><br><span class="hljs-comment">#进入博客根目录下，node_modules --&gt; hexo-assert-image --&gt; index.js文件，打开文件将58行代码替换</span><br>$(this).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + <span class="hljs-built_in">link</span> + src);<br><span class="hljs-comment">#替换为</span><br>$(this).attr(<span class="hljs-string">&#x27;src&#x27;</span>, src);<br><span class="hljs-comment">#md文件中使用![图片名称](博文名称/图片名称.后缀)即可</span><br></code></pre></td></tr></table></figure><h2 id="修改-config-yml配置"><a href="#修改-config-yml配置" class="headerlink" title="修改_config.yml配置"></a>修改_config.yml配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment">#指定主题，这里以fluid为例</span><br><span class="hljs-attr">title:</span> <span class="hljs-comment">#网站标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-comment">#网站副标题</span><br><span class="hljs-attr">author:</span> <span class="hljs-comment">#你的名字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#网站使用语言，中文</span><br><span class="hljs-attr">url:</span> <span class="hljs-comment">#网址，需要以http:// 或 https://开头</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#分页，每页显示的文章量（0 表示关闭分页功能）</span><br></code></pre></td></tr></table></figure><h2 id="修改-config-fluid-yaml配置"><a href="#修改-config-fluid-yaml配置" class="headerlink" title="修改_config.fluid.yaml配置"></a>修改_config.fluid.yaml配置</h2><p>该文件存在备注，可以自行看备注</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 顶部菜单背景色</span><br><span class="hljs-attr">avbar_bg_color:</span> <span class="hljs-string">&quot;#e4e4e5&quot;</span><br><span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#9a9a9a&quot;</span><br><span class="hljs-comment"># 主面板背景色</span><br><span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br><span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span><br><span class="hljs-comment"># 主页头图</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/xxx</span> <span class="hljs-comment">#图片需要存放在根目录下--&gt; source --&gt; img目录下 通过/img/xxx引用</span><br><span class="hljs-comment"># 关于页配置</span><br><span class="hljs-attr">about:</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/xxx</span> <span class="hljs-comment">#设置头像，图片需要存放在根目录下--&gt; source --&gt; img目录下 通过/img/xxx引用</span><br><span class="hljs-attr">name:</span> <span class="hljs-comment">#名称</span><br><span class="hljs-attr">intro:</span> <span class="hljs-comment">#简介</span><br><span class="hljs-comment"># 添加评论功能</span><br><span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><span class="hljs-comment"># 添加阅读量统计，这里的id和key使用的是leancloud第三方服务，可以在该网站注册账号</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 改为true</span><br><span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span><br>    <span class="hljs-attr">app_key:</span><br><span class="hljs-attr">views:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 改为true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span> <span class="hljs-comment"># 设置统计来源</span><br><span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure><h2 id="新建文章配置"><a href="#新建文章配置" class="headerlink" title="新建文章配置"></a>新建文章配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">layout:</span> <span class="hljs-comment">#布局</span><br><span class="hljs-attr">title:</span> <span class="hljs-comment">#标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-comment">#文件创建日期</span><br><span class="hljs-attr">update:</span> <span class="hljs-comment">#文件更新日期</span><br><span class="hljs-attr">comments:</span> <span class="hljs-comment">#开启文章评论功能</span><br><span class="hljs-attr">tags:</span> <span class="hljs-comment">#标签（多个用列表 -）</span><br><span class="hljs-attr">categories:</span> <span class="hljs-comment">#分类（多个用列表 -）</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-comment">#文章在首页的封面图，图片放在source下的img文件下，通过/img/xxx引入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
      <tag>主题配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker基础命令总结</title>
    <link href="/qtt2020.github.io/2023/02/01/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/qtt2020.github.io/2023/02/01/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>docker常用命令总结，使用方法解析</p><span id="more"></span><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images <span class="hljs-comment">#查看所有镜像</span><br>docker images -q <span class="hljs-comment">#查看所有镜像id</span><br>docker rmi 镜像<span class="hljs-built_in">id</span> <span class="hljs-comment">#删除镜像</span><br>docker pull python:2.7 <span class="hljs-comment">#拉去远程镜像</span><br></code></pre></td></tr></table></figure><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --name 容器名称 镜像名称 <span class="hljs-comment">#创建并进入容器</span><br>docker start 容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#启动容器</span><br>docker stop 容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#关闭容器</span><br>docker ps <span class="hljs-comment">#查看当前运行的容器</span><br>docker ps -a <span class="hljs-comment">#查看所有容器</span><br>docker ps -aq <span class="hljs-comment">#查看所有容器id</span><br>docker <span class="hljs-built_in">rm</span> 容器<span class="hljs-built_in">id</span> <span class="hljs-comment">#删除容器</span><br><span class="hljs-built_in">exit</span> <span class="hljs-comment">#退出容器</span><br>docker <span class="hljs-built_in">exec</span> -it 容器名 /bin/bash <span class="hljs-comment">#进入容器</span><br>docker commit 容器<span class="hljs-built_in">id</span> 镜像名称:版本号 <span class="hljs-comment">#容器转为镜像</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo+gitee搭建博客</title>
    <link href="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>docker + hexo + gitee + fluid搭建个人博客</p><h2 id="拉取镜像并启动容器"><a href="#拉取镜像并启动容器" class="headerlink" title="拉取镜像并启动容器"></a>拉取镜像并启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull python:2.7 <span class="hljs-comment">#因为hexo对python3后的版本有权限问题所以需要3一下的</span><br>docker ps -a <span class="hljs-comment">#查看镜像</span><br>docker run -it -p 4001:4001 --name blog python /bin/bash <span class="hljs-comment">#创建容器并进入容器</span><br><span class="hljs-comment">#注意一定要映射端口否则在宿主机上无法访问4000端口</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131142415062.png" class title="image-20230131142415062"><h2 id="Git安装配置"><a href="#Git安装配置" class="headerlink" title="Git安装配置"></a>Git安装配置</h2><p>注意：docker容器中已经存在git，可以不用下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install git <span class="hljs-comment">#安装git</span><br>git --version <span class="hljs-comment">#查看当前git版本</span><br><span class="hljs-comment">#git version 2.20.1 输出结果</span><br></code></pre></td></tr></table></figure><h2 id="Node-js安装配置"><a href="#Node-js安装配置" class="headerlink" title="Node.js安装配置"></a>Node.js安装配置</h2><p>安装nodejs前需要先安装nvm，nodejs版本管理器，可以快速切换node版本</p><h3 id="nvm安装配置"><a href="#nvm安装配置" class="headerlink" title="nvm安装配置"></a>nvm安装配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update <span class="hljs-comment">#更新apt安装包工具</span><br>apt install vim <span class="hljs-comment">#下载vim</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash <span class="hljs-comment">#安装nvm</span><br>vim ~/.bash_profile <span class="hljs-comment">#新建并打开该文件</span><br><span class="hljs-comment">#配置环境变量</span><br><span class="hljs-comment">#export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="hljs-comment">#[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br><span class="hljs-built_in">source</span> ~/.bash_profile <span class="hljs-comment">#刷新配置</span><br>nvm --version <span class="hljs-comment">#查看版本</span><br><span class="hljs-comment">#0.33.8</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131151359712.png" class title="image-20230131151359712"><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131153450486.png" class title="image-20230131153450486"><h3 id="node安装配置"><a href="#node安装配置" class="headerlink" title="node安装配置"></a>node安装配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install 18.0.0 <span class="hljs-comment">#安装node</span><br>node -v <span class="hljs-comment">#查看版本</span><br><span class="hljs-comment">#v18.0.0</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131154022618.png" class title="image-20230131154022618"><h2 id="hexo安装配置"><a href="#hexo安装配置" class="headerlink" title="hexo安装配置"></a>hexo安装配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g <span class="hljs-comment">#安装hexo</span><br>hexo -v <span class="hljs-comment">#查看版本</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131154513460.png" class title="image-20230131154513460"><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131154553632.png" class title="image-20230131154553632"><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init username.gitee.io <span class="hljs-comment">#会在当前目录下创建一个username.gitee.io的文件夹（username.gitee.io可以随意替换）</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131155333408.png" class title="image-20230131155333408"><h2 id="安装更新主题"><a href="#安装更新主题" class="headerlink" title="安装更新主题"></a>安装更新主题</h2><p>参考：<a href="https://hexo.fluid-dev.com/docs/start/#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">https://hexo.fluid-dev.com/docs/start/#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98</a></p><h2 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment">#清除缓存</span><br>hexo g <span class="hljs-comment">#生成静态文件</span><br>hexo s -p 4001 <span class="hljs-comment">#运行并指定端口4001</span><br></code></pre></td></tr></table></figure><img src="/qtt2020.github.io/2023/01/30/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20230131161234947.png" class title="image-20230131161234947">]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
